server:
  port: 8080
  address: 0.0.0.0

spring:
  application:
    name: backend
  servlet:
    multipart:
      enabled: true # multipart 활성화
      max-file-size: 10MB # 각 파일 최대 크기
      max-request-size: 50MB # 한 요청의 모든 데이터의 총 크기 제한

  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update # entity 기반 스키마 생성 // update 로 변경

    properties:
      hibernate:
        globally_quoted_identifiers: true # sql 예약어와 일치하는 필드명 구분
        format_sql: true
    open-in-view: false
    defer-datasource-initialization: true # ddl-auto 실행 후 data.sql 로 데이터 삽입

  sql: #data.sql 의 DDL 실행
    init:
      encoding: utf-8
      mode: always
      data-locations: classpath:sql/data.sql, classpath:sql/dummy.sql

  data:
    redis:
      host: ${REDIS_HOST}
      port: 6379

spring-doc:
  swagger-ui:
    tags-sorter: alpha # tag 순서 - 알파벳
    operations-sorter : method # HTTP 메소드 순서
    doc-expansion : none # 펼치지 않기

openapi:
  url: ${OPENAPI_URL}
  authKey: ${OPENAPI_AUTH_KEY}

kakao:
  restapiKey: ${RESTAPI_KEY}
  redirectUri: ${SERVER_URL}/login/oauth2/kakao
  tokenRequestUri: https://kauth.kakao.com/oauth/token
  userInfoUri: https://kapi.kakao.com/v2/user/me
  publicKeyUri: https://kauth.kakao.com/.well-known/jwks.json

apple:
  publicKeyUri: https://appleid.apple.com/auth/keys

jwt:
  secretKey: ${JWT_SECRET}
  accessTokenExpireTime: ${ACCESS_TOKEN_EXPIRE_TIME}
  refreshTokenExpireTime: ${REFRESH_TOKEN_EXPIRE_TIME}

isLocal: ${IS_LOCAL}

cloud:
  aws:
    s3:
      bucket: ${AWS_S3_BUCKET_NAME}
    credentials:
      access-key: ${AWS_S3_BUCKET_ACCESS_KEY}
      secret-key: ${AWS_S3_BUCKET_SECRET_KEY}
    region:
      static: ap-northeast-2 # 버킷 생성 지역
    stack:
      auto: false #??
